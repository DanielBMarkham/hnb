var URLHASH = new Object(); var __All_Questions_Checked = false; var __No_Questions_Checked = true; var __Questions_CheckState = []; var __All_ExperienceLevels_Checked = false; var __No_ExperienceLevels_Checked = true; var __ExperienceLevels_CheckState = []; var __All_Format_Checked = false; var __No_Format_Checked = true; var __Format_CheckState = []; var __All_Book_Checked = false; var __No_Book_Checked = true; var __Book_CheckState = []; var __PAGENEEDSSORT__ = false; var __HASHNEEDSCOMMIT__ = false; var BOOKORDERING = []; var BOOKDRAGSOURCE = []; var QLISTDIV = []; var ELISTDIV = []; var FLISTDIV = []; var BOOKLARGELIST = []; var RECOMMENDERNAMEINPUTTEXT = []; var ANSWERQUESTIONLINKTEXT = []; var BOOKLISTSPACER = []; function areNoFiltersSelected() { return (__No_Questions_Checked && __No_ExperienceLevels_Checked && __No_Format_Checked) } var Format = [{ ID: "1", Desc: "Book" }, { ID: "2", Desc: "E-Book" }, { ID: "3", Desc: "AudioBook" }, { ID: "4", Desc: "CD-ROM"}, { ID: "5", Desc: "Web App"}]; Array.prototype.removeByValue = function (b) { for (var a = 0; a < this.length; a++) { if (this[a] == b) { this.splice(a, 1); break } } }; function idFind(b, a) { var c = null; if (null == b) { return c } for (i = 0; i < b.length; i++) { if (b[i].ID == a) { c = b[i]; break } } return c } function idExists(b, a) { ret = false; if (null == b) { return ret } for (i = 0; i < b.length; i++) { if (b[i].ID == a) { ret = true; break } } return ret } function numFind(b, a) { var c = null; if (null == b) { return c } for (i = 0; i < b.length; i++) { if (b[i] == a) { c = b[i]; break } } return c } function numExists(b, a) { ret = false; if (null == b) { return ret } for (i = 0; i < b.length; i++) { if (b[i] == a) { ret = true; break } } return ret } function filterArray(b, g) { var a = b.length; var e = new Array(); var d = arguments[0]; for (var c = 0; c < a; c++) { if (c in b) { var h = b[c]; if (g(h, c, b)) { e.push(h) } } } return e } function getArrayFromUrl(b) { tempArr = new Array(); count = getHashCountFromUrl(b) * 1; for (i = 0; i < count; i++) { var a = $.bbq.getState(b + i); tempArr.push(a) } return tempArr } function makeHashChange() { __HASHNEEDSCOMMIT__ = false; $.bbq.pushState(URLHASH, 2) } function commitHashChange() { if (__HASHNEEDSCOMMIT__) { setTimeout(makeHashChange, 250) } } function getHashCount(c) { var b = URLHASH[c + "C"]; var a = []; if (null == b) { b = 0 } return b } function getHashCountFromUrl(b) { var a = $.bbq.getState(b + "C"); if (null == a) { a = 0 } return a } function setHashCount(c, a) { var b = URLHASH[c + "C"]; if (null == b) { b = 0 } URLHASH[c + "C"] = a } function doesNumberExistInHash(d, b) { var a = false; count = getHashCount(d) * 1; for (i = 0; i < count; i++) { var c = URLHASH[d + i] * 1; if (c === b * 1) { a = true; break } } return a } function addToHashIfNew(b, a) { if (a === "") { return } count = getHashCount(b) * 1; if (!doesNumberExistInHash(b, a)) { URLHASH[b + count] = a; URLHASH[b + "C"] = (count + 1); __HASHNEEDSCOMMIT__ = true } } function compactHash(c) { var b = []; count = getHashCount(c) * 1; for (i = 0; i < count + 1; i++) { if (URLHASH[c + i]) { var a = URLHASH[c + i] * 1; b.push(a); setArrayToHash(c, b) } } } function removeFromHash(c, a) { if (a === "") { return } count = getHashCount(c) * 1; if (doesNumberExistInHash(c, a * 1)) { for (i = 0; i < count; i++) { var b = URLHASH[c + i] * 1; if (b === a * 1) { delete URLHASH[c + i]; URLHASH[c + "C"] = (count - 1); __HASHNEEDSCOMMIT__ = true; break } } compactHash(c) } } function getArrayFromHash(b) { tempArr = new Array(); count = getHashCount(b) * 1; for (i = 0; i < count; i++) { var a = URLHASH[b + i]; tempArr.push(a) } return tempArr } function removeAllArrayFromHash(c) { var a = getArrayFromHash(c); var b = a.length; for (i = 0; i < b; i++) { delete URLHASH[c + i] } setHashCount(c, 0); __HASHNEEDSCOMMIT__ = true } function setArrayToHash(b, a) { removeAllArrayFromHash(b); $(a).each(function (c) { addToHashIfNew(b, a[c]) }) } function urlToLocalHash(a) { $(a).each(function (c) { var b = getArrayFromUrl(this); setArrayToHash(this, b) }) } function setNameInHash(a) { if (null == a) { return } URLHASH.Name = a; __HASHNEEDSCOMMIT__ = true } function getNameFromHash(b) { var a = URLHASH.Name; if (null == a) { a = "" } return decodeURI(a) } function getNameFromUrl(b) { var a = $.bbq.getState("Name"); if (null == a) { a = "" } return decodeURI(a) } function getBookHashArray() { var a = []; a = getArrayFromHash("B"); return a } function removeAllBooksSelectedListFromHash() { removeAllArrayFromHash("B") } function idExistsInHash(c, d) { var a = false; var b = getArrayFromHash(c); a = numExists(b, d); return a } function isQuestionIDChecked(b) { var a = false; idExistsInHash("Q", b); return a } function isExperienceLevelsIDChecked(b) { var a = false; idExistsInHash("E", b); return a } function isFormatIDChecked(b) { var a = false; a = idExistsInHash("F", b); return a } function isBookIDChecked(b) { var a = false; idExistsInHash("B", b); return a } function bookContainsFormatID(a, b) { ret = false; for (i = 0; i < a.wPurchaseInfo.length; i++) { bookFormatID = formatIDFromDesc(a.wPurchaseInfo[i].Format); if (bookFormatID === b) { ret = true; break } } return ret } function bookFormatMatchesASelectedFormat(b, d) { if (__All_Format_Checked || __No_Format_Checked) { return true } var a = false; if (d === "AND") { a = true } var c = b.wPurchaseInfo; $(c).each(function (g) { var f = c[g].FormatID; var e = isFormatIDChecked(f); if (e) { if (d === "OR") { a = true } else { a = a && true } } else { if (d === "AND") { a = false } else { a = a || false } } }); return a } function doesBookAnswerThisQuestionID(b, c) { var a = false; for (k = 0; k < b.QuestionsAnswered.length; k++) { if (b.QuestionsAnswered[k].QuestionID == c) { a = true; break } } return a } function doesBookAnswerAnySelectedQuestion(b) { if (__All_Questions_Checked || __No_Questions_Checked) { return true } var a = false; for (j = 0; j < b.QuestionsAnswered.length; j++) { questSelected = isQuestionIDChecked(Questions[j].ID); if (true === questSelected) { a = true; break } } return a } function doesBookAnswerAllOfTheSelectedQuestions(c) { if (__All_Questions_Checked || __No_Questions_Checked) { return true } var b = true; var a = getArrayFromHash("Q"); if (!__All_Questions_Checked) { for (j = 0; j < a.length; j++) { bookAnswersTheQuestion = doesBookAnswerThisQuestionID(c, a[j]); if (!bookAnswersTheQuestion) { b = false; break } } } return b } function completeQuestionTemplateAndAppend(a, f) { var c = '<li id="Question###QUESTIONID###" class="ui-widget-content"><div class="questionWidget">#######</div></li>'; var b = a.Desc; var d = c.replace("###QUESTIONID###", a.ID); var e = d.replace("#######", b); f.append(e) } function completeExperienceLevelTemplateAndAppend(a, e) { var b = '<li id="ExperienceLevel###EXPERIENCELEVELID###" class="ui-widget-content"><div class="experienceLevelWidget">#######</div></li>'; var f = a.Desc; var c = b.replace("###EXPERIENCELEVELID###", a.ID); var d = c.replace("#######", f); e.append(d) } function completeFormatTemplateAndAppend(e, f) { var b = '<li id="Format###FORMATID###" class="ui-widget-content"><div class="formatWidget">#######</div></li>'; var a = e.Desc; var c = b.replace("###FORMATID###", e.ID); var d = c.replace("#######", a); f.append(d) } function completeLargeBookTemplateAndAppend(d, b) { var g = '<li class="ui-widget-content"><a name="N###BOOKNUMBER###"></a><div class="bookWidgetLarge"><div class="bookWidgetLargeImageBox"><a href="#$#BOOKDETAILLINK#$#"><img src="#$#SMALLPICTURELINK#$#" alt="###BOOKTITLE###" /></a><button class="book###BOOKNUMBER###Button">Zoom</button></div><div class=""><a href="#$#BOOKDETAILLINK#$#"><h3>###BOOKTITLE###</h3><h4>#$#SUBTITLE#$#</h4></a>#$#HTMLDESCRIPTION#$#</div><div class="bookWidgetLargeBottomBar">'; var p = '<button><a href="#$#PURCHASELINK#$#">#$#FORMATNAME#$#</a></button> '; g += "#$#FORMATPURCHASELINK#$#"; g += "</div></div></li>"; var m = g.replace(/###BOOKTITLE###/g, d.Title); var o = m.replace(/#\$#BOOKDETAILLINK#\$#/g, ("http://www.hn-books.com/Books/" + d.WebName + ".htm")); var l = o.replace(/#\$#SUBTITLE#\$#/g, d.SubTitle); var e = l.replace("#$#SMALLPICTURELINK#$#", d.SmallPictureLink); var n = e.replace("#$#HTMLDESCRIPTION#$#", d.HtmlDescription); var a = d.ID; var c = n.replace(/###BOOKNUMBER###/g, a); var f = ""; var q = d.wPurchaseInfo.length; for (i = 0; i < q; i++) { n1 = p.replace(/#\$#PURCHASELINK#\$#/g, d.wPurchaseInfo[i].PurchaseLink); n2 = n1.replace(/#\$#FORMATNAME#\$#/g, d.wPurchaseInfo[i].Format); f += n2 } tempWithButtons = c.replace("#$#FORMATPURCHASELINK#$#", f); b.append(tempWithButtons); var h = ".book" + a + "Button"; $(h).colorbox({ href: d.LargePictureLink }) } function completeSmallBookTemplateAndAppend(c, f) { var b = '<li class="ui-widget-content" id="Book#$#BOOKID#$#"><div class="bookWidgetSmall"><img src="#$#SMALLPICTURELINK#$#" alt="Book cover: ###BOOKTITLE###" /><div class="bookTitle">###BOOKTITLE###</div></div></li>'; var a = b.replace(/###BOOKTITLE###/g, c.Title); var e = a.replace(/#\$#SMALLPICTURELINK#\$#/g, c.SmallPictureLink); var d = e.replace(/#\$#BOOKID#\$#/g, c.ID); f.append(d) } function getBookScore(a) { total = 0; cnt = 0; for (j = 0; j < a.QuestionsAnswered.length; j++) { cked = isQuestionIDChecked(a.QuestionsAnswered[j].QuestionID); if ((true === cked) || (true === __No_Questions_Checked)) { for (k = 0; k < a.QuestionsAnswered[j].ExperienceLevels.length; k++) { expLevelBeingChecked = a.QuestionsAnswered[j].ExperienceLevels[k].ExperienceLevelID; expcked = isExperienceLevelsIDChecked(expLevelBeingChecked); if ((true === expcked) || (true === __No_ExperienceLevels_Checked)) { total = total + parseFloat(a.QuestionsAnswered[j].ExperienceLevels[k].Score); cnt++ } } } } if (cnt != 0) { ret = total / cnt; return ret } else { return 0 } } function bookSort(d, c) { return getBookScore(d) < getBookScore(c) } var SELECTOR_MATCH_TYPE = "AND"; function bookMatchWithSelectors(c, b, d) { var a = false; if (SELECTOR_MATCH_TYPE === "OR") { bookAnswersOneOfTheSelectedQuestions = doesBookAnswerAnySelectedQuestion(c); formatMatch = bookFormatMatchesASelectedFormat(c, SELECTOR_MATCH_TYPE); a = bookAnswersOneOfTheSelectedQuestions && formatMatch } else { if (SELECTOR_MATCH_TYPE === "AND") { bookAnswersAllOfTheSelectedQuestions = doesBookAnswerAllOfTheSelectedQuestions(c); formatMatch = bookFormatMatchesASelectedFormat(c, "OR"); a = bookAnswersAllOfTheSelectedQuestions && formatMatch } } return a } function bookFilter(a) { temp = a.slice(); if (__All_Questions_Checked && __All_Format_Checked) { ret = temp } else { try { ret = temp.filter(bookMatchWithSelectors) } catch (b) { ret = filterArray(temp, bookMatchWithSelectors) } } return ret } function filterBooksBySelectors() { BOOKORDERING.children().remove(); var b = bookFilter(Books); var a = b.sort(bookSort); zapBookListInDOM(); addBookArrayToDOM(b) } jQuery.fn.fadeThenSlideToggle = function (a, c, b) { if (this.is(":hidden")) { return this.slideDown(a, c).fadeTo(a, 1, c, b) } else { return this.fadeTo(a, 0, c).slideUp(a, c, b) } }; function onPageWithManualUserBookSorting() { return BOOKDRAGSOURCE.length != 0 } function addStaticDOMContent() { $(Questions).each(function (a) { completeQuestionTemplateAndAppend(Questions[a], QLISTDIV) }); $(ExperienceLevels).each(function (a) { completeExperienceLevelTemplateAndAppend(ExperienceLevels[a], ELISTDIV) }); $(Format).each(function (a) { completeFormatTemplateAndAppend(Format[a], FLISTDIV) }) } function zapBookListInDOM() { BOOKLARGELIST.find("li").fadeThenSlideToggle().remove() } function addBookArrayToDOM(c) { var b = $(".bookLargeList"); if (b.length == 0) { return } b.hide(); if (areThereBooksInUrl()) { var a = getArrayFromUrl("B"); $(a).each(function (e) { var d = idFind(c, a[e]); completeLargeBookTemplateAndAppend(d, b) }) } else { $(c).each(function (d) { completeLargeBookTemplateAndAppend(c[d], b) }) } b.show() } function areThereBooksInHash() { var a = false; a = getHashCount("B"); return (a != 0) } function areThereBooksInUrl() { var a = false; a = getHashCountFromUrl("B"); return (a != 0) } function doesHashMatchOrderedBox() { var a = true; var d = getHashCountFromUrl("B"); var c = BOOKORDERING.find("li"); var b = getArrayFromUrl("B"); if (c.length != b.length) { return false } $(b).each(function (e) { if (("Book" + b[e]) != c[e].id) { a = false; return false } }); return a } function alphabetical(e, d) { var c = e.toLowerCase(); var f = d.toLowerCase(); if (c < f) { return -1 } else { if (c > f) { return 1 } else { return 0 } } } function sortByTitle(d, c) { return alphabetical(d.Title, c.Title) } function fillBookSelectionBoxes(b) { var c = BOOKDRAGSOURCE; var a = BOOKORDERING; c.hide(); c.find("li").remove(); a.hide(); a.find("li").remove(); var d = (Books.slice()).sort(sortByTitle); $(d).each(function (e) { if (numExists(b, this.ID)) { } else { completeSmallBookTemplateAndAppend(this, c) } }); $(b).each(function (e) { tempBook = idFind(Books, b[e]); completeSmallBookTemplateAndAppend(tempBook, a) }); c.show(); a.show() } function areThereBooksInSorter() { return BOOKORDERING.find("li").length } function displayHashSelectedBooksInLargeFormat() { var a = getArrayFromHash("B"); var b = $(".bookLargeList"); b.hide(); b.children().remove(); $(a).each(function (c) { tempBook = idFind(Books, a[c]); completeLargeBookTemplateAndAppend(tempBook, b) }); updateLinkText(); b.show() } function getLinkText() { var a = ""; var b = document.URL.split("//"); var c = b[1].split("#"); if (null == c[1]) { a = "" } else { a = "http://www.hn-books.com#" + c[1] } return a } var rgba = __features.IS_RGBA_SUPPORTED; __savedHeight = 0; function resizeTheColorbox(a) { if (a > 0) { __savedHeight = new Number(a); var b = __savedHeight + 50; $(".open-ideas-box").colorbox.resize({ height: b }); $(".askLink").colorbox.resize({ height: b }) } } function syncSelectedWithHashAddNew(a, d, c) { var b = (a.id).substring(d, (a.id).length); addToHashIfNew(c, b) } function syncSelectedWithHashRemoveOld(a, d, c) { var b = (a.id).substring(d, (a.id).length); removeFromHash(c, b) } function bindEvents() { $(".faqLink").colorbox({ width: "50%", inline: true, href: "#faqExplain" }); if (!rgba) { v = $(".button-red"); v.css("background-color", "#ff6600") } $("img").lazyload({ threshold: 500 }) } function updateLinkText() { if (RECOMMENDERNAMEINPUTTEXT.length == 0) { return } var b = $(RECOMMENDERNAMEINPUTTEXT)[0].value; var a = getLinkText(); if ((null == a) || (a == "")) { return } if ((null == b) || (b == "")) { ANSWERQUESTIONLINKTEXT.text(a) } else { ANSWERQUESTIONLINKTEXT.text(a + "&Name=" + encodeURI(b)) } } function sortPage() { __PAGENEEDSSORT__ = true; setTimeout(performSortPage, 1500) } function performSortPage() { if (__PAGENEEDSSORT__) { __PAGENEEDSSORT__ = false; filterBooksBySelectors(); bindEvents() } } function setCheckedValForID(a, c, b) { for (i = 0; c < a.length; i++) { if (a[i].ID == c) { a[i].IsChecked = b; break } } } function syncSelectorsWithState() { QLISTDIV.find("li").each(function (c) { var d = this.id; var b = d.substring(8, d.length); var a = idFind(__Questions_CheckState, b); if (a.IsChecked) { $(this).addClass("ui-selected") } else { $(this).removeClass("ui-selected") } }); ELISTDIV.find("li").each(function (c) { var d = this.id; var b = d.substring(15, d.length); var a = idFind(__ExperienceLevels_CheckState, b); if (a.IsChecked) { $(this).addClass("ui-selected") } else { $(this).removeClass("ui-selected") } }); FLISTDIV.find("li").each(function (c) { var d = this.id; var b = d.substring(6, d.length); var a = idFind(__Format_CheckState, b); if (a.IsChecked) { $(this).addClass("ui-selected") } else { $(this).removeClass("ui-selected") } }) } function displaySmallBookList() { fillBookSelectionBoxes(getBookHashArray()) } function displayLargeBookList() { if (areThereBooksInHash()) { displayHashSelectedBooksInLargeFormat() } else { if (areNoFiltersSelected()) { zapBookListInDOM(); addBookArrayToDOM(Books); sortPage() } else { sortPage() } } } function syncPageWithState() { updateLinkText(); var b = getNameFromUrl(); if ("" === b) { BOOKLISTSPACER.find("h1").remove(); BOOKLISTSPACER.css("height", "1px") } else { BOOKLISTSPACER.append("<h1> Recommendations from " + getNameFromUrl() + "</h1>"); BOOKLISTSPACER.css("height", "2.25em") } syncSelectorsWithState(); var a = onPageWithManualUserBookSorting(); if (a) { displaySmallBookList() } else { displayLargeBookList() } bindEvents() } function getStateFromUrl() { __All_Questions_Checked = true; __No_Questions_Checked = true; __Questions_CheckState = []; __All_Format_Checked = true; __No_Format_Checked = true; __Format_CheckState = []; __All_Books_Checked = true; __No_Books_Checked = true; __Books_CheckState = []; __All_ExperienceLevels_Checked = true; __No_ExperienceLevels_Checked = true; __ExperienceLevels_CheckState = []; qArrInx = 0; eArrInx = 0; var a = getArrayFromHash("Q"); if (a.length === Questions.length) { __All_Questions_Checked = true } else { __All_Questions_Checked = false } if (a.length === 0) { __No_Questions_Checked = true } else { __No_Questions_Checked = false } __Questions_CheckState = []; $(Questions).each(function (c) { __Questions_CheckState[c] = { ID: Questions[c].ID, IsChecked: false} }); $(a).each(function (c) { setCheckedValForID(__Questions_CheckState, a[c] * 1, true) }); var b = getArrayFromHash("E"); if (b.length === ExperienceLevels.length) { __All_ExperienceLevels_Checked = true } else { __All_ExperienceLevels_Checked = false } if (b.length === 0) { __No_ExperienceLevels_Checked = true } else { __No_ExperienceLevels_Checked = false } __ExperienceLevels_CheckState = []; $(ExperienceLevels).each(function (c) { __ExperienceLevels_CheckState[c] = { ID: ExperienceLevels[c].ID, IsChecked: false} }); $(b).each(function (c) { setCheckedValForID(__ExperienceLevels_CheckState, b[c] * 1, true) }); var b = getArrayFromHash("F"); if (b.length === Format.length) { __All_Format_Checked = true } else { __All_Format_Checked = false } if (b.length === 0) { __No_Format_Checked = true } else { __No_Format_Checked = false } __Format_CheckState = []; $(Format).each(function (c) { __Format_CheckState[c] = { ID: Format[c].ID, IsChecked: false} }); $(b).each(function (c) { setCheckedValForID(__Format_CheckState, b[c] * 1, true) }); var b = getArrayFromHash("B"); if (b.length === Books.length) { __All_Books_Checked = true } else { __All_Books_Checked = false } if (b.length === 0) { __No_Books_Checked = true } else { __No_Books_Checked = false } __Books_CheckState = []; $(Books).each(function (c) { __Books_CheckState[c] = { ID: Books[c].ID, IsChecked: false} }); $(b).each(function (c) { setCheckedValForID(__Books_CheckState, b[c] * 1, true) }) } $(window).bind("hashchange", function (b) { var a = b.fragment; urlToLocalHash(["Q", "F", "E", "B"]); getStateFromUrl(); syncPageWithState() }); $(document).ready(function () { BOOKORDERING = $("#bookOrdering"); BOOKDRAGSOURCE = $("#bookDragSource"); QLISTDIV = $("#questionSelection"); ELISTDIV = $("#experienceLevelSelection"); FLISTDIV = $("#formatSelection"); BOOKLARGELIST = $(".bookLargeList"); RECOMMENDERNAMEINPUTTEXT = $("#recommenderName"); ANSWERQUESTIONLINKTEXT = $("#answerQuestionLinkText"); BOOKLISTSPACER = $("#bookListSpacer"); urlToLocalHash(["Q", "F", "E", "B"]); addStaticDOMContent(); getStateFromUrl(); syncPageWithState(); ELISTDIV.selectable({ stop: function () { if (!BOOKDRAGSOURCE.length) { removeAllBooksSelectedListFromHash() } $("li", this).not(".ui-selected").each(function () { syncSelectedWithHashRemoveOld(this, 15, "E") }); $(".ui-selected", this).each(function () { syncSelectedWithHashAddNew(this, 15, "E") }); commitHashChange() } }); QLISTDIV.selectable({ stop: function () { if (!BOOKDRAGSOURCE.length) { removeAllBooksSelectedListFromHash() } $("li", this).not(".ui-selected").each(function () { var a = (this.id).substring(8, (this.id).length); removeFromHash("Q", a) }); $(".ui-selected", this).each(function () { var a = (this.id).substring(8, (this.id).length); addToHashIfNew("Q", a) }); commitHashChange() } }); FLISTDIV.selectable({ stop: function () { if (!BOOKDRAGSOURCE.length) { removeAllBooksSelectedListFromHash() } $("li", this).not(".ui-selected").each(function () { syncSelectedWithHashRemoveOld(this, 6, "F") }); $(".ui-selected", this).each(function () { syncSelectedWithHashAddNew(this, 6, "F") }); commitHashChange() } }); $("#bookDragSource, #bookOrdering").sortable({ connectWith: ".bookLinkedList", update: function (c, d) { var b = BOOKORDERING.find("li"); var a = []; $(b).each(function (e) { bid = this.id; bookID = bid.substring(4, bid.length); a.push(bookID) }); setArrayToHash("B", a); commitHashChange() } }).disableSelection(); RECOMMENDERNAMEINPUTTEXT.change(function () { updateLinkText() }); RECOMMENDERNAMEINPUTTEXT.keyup(function () { updateLinkText() }); $(function () { $(".open-ideas-box").colorbox({ inline: true, href: "#wufoo-form-ideas iframe", width: 500, innerHeight: $("#wufoo-form iframe").height() }) }); $(function () { $(".askLink").colorbox({ inline: true, href: "#wufoo-form-askaquestion iframe", width: 500, innerHeight: $("#wufoo-form iframe").height() }) }); $(document).bind("cbox_complete", function () { resizeTheColorbox(__savedHeight) }) });
